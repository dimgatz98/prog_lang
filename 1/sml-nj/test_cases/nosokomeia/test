fun solve (l) = 
	let
		val m
		val n
		fun split_at_space ([], acc) = acc|
			split_at_space (a::xs, acc) = 
			let 
				val temp = (acc @ String.tokens Char.isSpace a)
			in
				split_at_space (xs, temp)
			end

		fun calc_input (M::N::xs) = 
			let
				val m = (valOf (Int.fromString M) );
				val n = (valOf (Int.fromString N) );
				val temp = Array.array (m, 0);
				fun calc_prefix ([], counter) = ()
				|	calc_prefix (h::xxs, counter) = 
						if counter = 0
							then (Array.update (temp, counter, (valOf (Int.fromString h)) ); calc_prefix (xxs, counter + 1))
						else	
							(Array.update (temp, counter, Array.sub(temp, counter - 1) + (valOf (Int.fromString h)) ); calc_prefix (xxs, counter + 1))
			in
				calc_prefix (xs, 0);
				temp
			end

			val arr = split_at_space (l, [])

	in
